This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-02T16:30:20.621Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
Equipment.js
File.js
index.js
MaintenanceHistory.js
Notification.js
ServiceOrder.js
User.js

================================================================
Files
================================================================

================
File: Equipment.js
================
const { Model, DataTypes } = require('sequelize');
const { ServiceOrder } = require('./ServiceOrder');
const { MaintenanceHistory } = require('./MaintenanceHistory');

class Equipment extends Model {
    static init(sequelize) {
      super.init({
        name: {
          type: DataTypes.STRING,
          allowNull: false,
          validate: {
            notEmpty: true,
          },
        },
        code: {
          type: DataTypes.STRING,
          allowNull: false,
          unique: true,
        },
        serial_number: DataTypes.STRING,
        department: {
          type: DataTypes.STRING,
          allowNull: false,
        },
        description: DataTypes.TEXT,
        status: {
          type: DataTypes.ENUM('active', 'maintenance', 'inactive'),
          defaultValue: 'active',
        },
        qrcode_url: DataTypes.STRING,
        last_maintenance: DataTypes.DATE,
        maintenance_frequency: {
          type: DataTypes.INTEGER, // em dias
          defaultValue: 30,
        },
      }, {
        sequelize,
        tableName: 'equipment',
      });
    }
  
    static associate(models) {
      this.hasMany(models.ServiceOrder, { as: 'service_orders' });
      this.hasMany(models.MaintenanceHistory, { as: 'maintenance_history' });
    }
  }

  module.exports = {
    Equipment
  };

================
File: File.js
================
const { Model, DataTypes } = require('sequelize');
class File extends Model {
    static init(sequelize) {
      super.init({
        name: {
          type: DataTypes.STRING,
          allowNull: false,
        },
        path: {
          type: DataTypes.STRING,
          allowNull: false,
        },
        url: {
          type: DataTypes.VIRTUAL,
          get() {
            return `${process.env.APP_URL}/files/${this.path}`;
          },
        },
      }, {
        sequelize,
        tableName: 'files',
      });
    }
  
    static associate(models) {
      this.belongsTo(models.ServiceOrder, { foreignKey: 'service_order_id' });
    }
  }

  module.exports = {
    File
  };

================
File: index.js
================
const fs = require('fs');
const path = require('path');
const Sequelize = require('sequelize');
const process = require('process');
const basename = path.basename(__filename);
const env = process.env.NODE_ENV || 'development';
const config = require('../config/database')[env];

const db = {};

let sequelize;
if (config.use_env_variable) {
  sequelize = new Sequelize(process.env[config.use_env_variable], config);
} else {
  sequelize = new Sequelize(config.database, config.username, config.password, config);
}

fs
  .readdirSync(__dirname)
  .filter(file => {
    return (
      file.indexOf('.') !== 0 &&
      file !== basename &&
      file.slice(-3) === '.js' &&
      file.indexOf('.test.js') === -1
    );
  })
  .forEach(file => {
    const model = require(path.join(__dirname, file))(sequelize, Sequelize.DataTypes);
    db[model.name] = model;
  });

Object.keys(db).forEach(modelName => {
  if (db[modelName].associate) {
    db[modelName].associate(db);
  }
});

db.sequelize = sequelize;
db.Sequelize = Sequelize;

module.exports = db;

================
File: MaintenanceHistory.js
================
const { Model, DataTypes } = require('sequelize');
const { User } = require('./User');
const { Equipment } = require('./Equipment');

class MaintenanceHistory extends Model {
    static init(sequelize) {
      super.init({
        maintenance_date: {
          type: DataTypes.DATE,
          allowNull: false,
        },
        type: {
          type: DataTypes.ENUM('preventive', 'corrective', 'predictive'),
          allowNull: false,
        },
        description: DataTypes.TEXT,
        cost: DataTypes.DECIMAL(10, 2),
        parts_replaced: DataTypes.JSON,
      }, {
        sequelize,
        tableName: 'maintenance_history',
      });
    }
  
    static associate(models) {
      this.belongsTo(models.Equipment, { foreignKey: 'equipment_id' });
      this.belongsTo(models.User, { foreignKey: 'performed_by' });
    }
  }

  module.exports = {
    MaintenanceHistory,
  };

================
File: Notification.js
================
const { Model, DataTypes } = require('sequelize');

module.exports = (sequelize) => {
  class Notification extends Model {
    static associate(models) {
      // Definição das associações
      this.belongsTo(models.User, {
        foreignKey: 'recipient_id',
        as: 'recipient'
      });
      
      this.belongsTo(models.User, {
        foreignKey: 'sender_id',
        as: 'sender'
      });
    }
  }

  Notification.init({
    id: {
      type: DataTypes.INTEGER,
      autoIncrement: true,
      primaryKey: true
    },
    recipient_id: {
      type: DataTypes.INTEGER,
      allowNull: false,
      references: {
        model: 'users', // Nome da tabela no banco de dados
        key: 'id'
      }
    },
    sender_id: { // Campo faltante na versão original
      type: DataTypes.INTEGER,
      allowNull: true,
      references: {
        model: 'users',
        key: 'id'
      }
    },
    type: {
      type: DataTypes.STRING,
      allowNull: false,
      validate: {
        notEmpty: true
      }
    },
    title: {
      type: DataTypes.STRING,
      allowNull: false,
      validate: {
        len: [5, 255]
      }
    },
    message: {
      type: DataTypes.TEXT,
      allowNull: false,
      validate: {
        notEmpty: true
      }
    },
    read: {
      type: DataTypes.BOOLEAN,
      defaultValue: false
    },
    reference_type: {
      type: DataTypes.STRING,
      allowNull: true
    },
    reference_id: {
      type: DataTypes.INTEGER,
      allowNull: true
    },
    priority: {
      type: DataTypes.ENUM,
      values: ['low', 'normal', 'high'],
      defaultValue: 'normal',
      validate: {
        isIn: [['low', 'normal', 'high']]
      }
    }
  }, {
    sequelize,
    modelName: 'Notification',
    tableName: 'notifications',
    timestamps: true,
    underscored: true,
    paranoid: false, // Adicione se quiser soft delete
    indexes: [
      {
        fields: ['recipient_id']
      },
      {
        fields: ['read']
      }
    ]
  });

  return Notification;
};

================
File: ServiceOrder.js
================
const { Model, DataTypes } = require('sequelize');
class ServiceOrder extends Model {
    static init(sequelize) {
      super.init({
        description: {
          type: DataTypes.TEXT,
          allowNull: false,
        },
        type: {
          type: DataTypes.ENUM('preventive', 'corrective', 'predictive'),
          allowNull: false,
        },
        priority: {
          type: DataTypes.ENUM('low', 'medium', 'high', 'critical'),
          defaultValue: 'medium',
        },
        status: {
          type: DataTypes.ENUM('pending', 'in_progress', 'completed', 'cancelled'),
          defaultValue: 'pending',
        },
        scheduled_for: {
          type: DataTypes.DATE,
          allowNull: false,
        },
        completed_at: DataTypes.DATE,
        cost: DataTypes.DECIMAL(10, 2),
        notes: DataTypes.TEXT,
      }, {
        sequelize,
        tableName: 'service_orders',
      });
    }
  
    static associate(models) {
      this.belongsTo(models.Equipment, { foreignKey: 'equipment_id', as: 'equipment' });
      this.belongsTo(models.User, { foreignKey: 'created_by', as: 'creator' });
      this.belongsTo(models.User, { foreignKey: 'assigned_to', as: 'technician' });
      this.hasMany(models.File, { as: 'files' });
    }
  }

  module.exports = {
    ServiceOrder
  };

================
File: User.js
================
const { Model, DataTypes } = require('sequelize');
const bcrypt = require('bcryptjs');

class User extends Model {
  static init(sequelize) {
    super.init({
      name: {
        type: DataTypes.STRING,
        allowNull: false,
        validate: {
          notEmpty: true,
        },
      },
      email: {
        type: DataTypes.STRING,
        allowNull: false,
        unique: true,
        validate: {
          isEmail: true,
        },
      },
      password: {
        type: DataTypes.STRING,
        allowNull: false,
      },
      role: {
        type: DataTypes.ENUM('admin', 'manager', 'technician'),
        defaultValue: 'technician',
      },
      active: {
        type: DataTypes.BOOLEAN,
        defaultValue: true,
      },
    }, {
      sequelize,
      tableName: 'users',
      hooks: {
        beforeSave: async (user) => {
          if (user.password && user.changed('password')) {
            user.password = await bcrypt.hash(user.password, 8);
          }
        },
      },
    });
  }

  static associate(models) {
    this.hasMany(models.ServiceOrder, { foreignKey: 'created_by', as: 'service_orders' });
  }

  checkPassword(password) {
    return bcrypt.compare(password, this.password);
  }
}

module.exports = {
    User
  };
